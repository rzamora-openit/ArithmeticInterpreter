// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OpeniT.Timesheet.Web.Models;

namespace OpeniT.Timesheet.Web.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20220110121232_UpdatesUserContractModel")]
    partial class UpdatesUserContractModel
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("OpeniT.Timesheet.Web.Models.Checkin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CheckinIssueDate");

                    b.Property<double>("CheckinPercentage");

                    b.Property<double>("CheckinQuantity");

                    b.Property<string>("CheckinType");

                    b.Property<bool>("IsDeleted");

                    b.Property<int?>("KeyResultId");

                    b.Property<int?>("LineManagerId");

                    b.Property<DateTime>("LmCheckinDate");

                    b.Property<string>("LmComment");

                    b.Property<bool>("LmCommentLocked");

                    b.Property<int?>("ObjectiveId");

                    b.Property<DateTime>("OwnerCheckinDate");

                    b.Property<string>("OwnerComment");

                    b.Property<bool>("OwnerCommentLocked");

                    b.Property<int?>("OwnerId");

                    b.Property<string>("Status");

                    b.Property<bool>("StatusLocked");

                    b.HasKey("Id");

                    b.HasIndex("KeyResultId");

                    b.HasIndex("LineManagerId");

                    b.HasIndex("ObjectiveId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Checkins");
                });

            modelBuilder.Entity("OpeniT.Timesheet.Web.Models.CheckinConversation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CheckinId");

                    b.Property<DateTimeOffset>("Date");

                    b.Property<DateTimeOffset>("DateDeleted");

                    b.Property<DateTimeOffset>("DateEdited");

                    b.Property<int?>("KeyResultId");

                    b.Property<string>("Message");

                    b.Property<int?>("ObjectiveId");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("CheckinId");

                    b.HasIndex("KeyResultId");

                    b.HasIndex("ObjectiveId");

                    b.HasIndex("UserId");

                    b.ToTable("CheckinConversation");
                });

            modelBuilder.Entity("OpeniT.Timesheet.Web.Models.DeviationActivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment");

                    b.Property<DateTimeOffset>("Date");

                    b.Property<int?>("DeviationReportId");

                    b.Property<int?>("ParentId");

                    b.Property<string>("Type");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("DeviationReportId");

                    b.HasIndex("ParentId");

                    b.HasIndex("UserId");

                    b.ToTable("DeviationActivities");
                });

            modelBuilder.Entity("OpeniT.Timesheet.Web.Models.DeviationActivityAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DeviationActivityId");

                    b.Property<int>("FileId");

                    b.Property<string>("FileName");

                    b.Property<int>("FileSize");

                    b.Property<string>("FileTypeInfo");

                    b.HasKey("Id");

                    b.HasIndex("DeviationActivityId");

                    b.HasIndex("FileId");

                    b.ToTable("DeviationActivitytAttachments");
                });

            modelBuilder.Entity("OpeniT.Timesheet.Web.Models.DeviationReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Access");

                    b.Property<DateTimeOffset>("Date");

                    b.Property<DateTimeOffset?>("DateTransferred");

                    b.Property<string>("Description");

                    b.Property<string>("LongTermSolution");

                    b.Property<int?>("ProcessId");

                    b.Property<string>("ProcessUrl");

                    b.Property<int?>("ReportedById");

                    b.Property<bool>("SeenByOwner");

                    b.Property<bool>("SeenBySubOwner");

                    b.Property<string>("ShortTermSolution");

                    b.Property<string>("Status");

                    b.Property<int?>("SubProcessId");

                    b.Property<string>("Subject");

                    b.Property<DateTimeOffset?>("UpdatedAt");

                    b.Property<int?>("UpdatedById");

                    b.HasKey("Id");

                    b.HasIndex("ProcessId");

                    b.HasIndex("ReportedById");

                    b.HasIndex("SubProcessId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("DeviationReports");
                });

            modelBuilder.Entity("OpeniT.Timesheet.Web.Models.DeviationReportAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DeviationReportId");

                    b.Property<int>("FileId");

                    b.Property<string>("FileName");

                    b.Property<int>("FileSize");

                    b.Property<string>("FileTypeInfo");

                    b.HasKey("Id");

                    b.HasIndex("DeviationReportId");

                    b.HasIndex("FileId");

                    b.ToTable("DeviationReportAttachments");
                });

            modelBuilder.Entity("OpeniT.Timesheet.Web.Models.DeviationReportInvolve", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DeviationReportId");

                    b.Property<string>("Type");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("DeviationReportId");

                    b.HasIndex("UserId");

                    b.ToTable("DeviationReportInvolves");
                });

            modelBuilder.Entity("OpeniT.Timesheet.Web.Models.DeviationReportSolutionsAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DeviationReportId");

                    b.Property<int>("FileId");

                    b.Property<string>("FileName");

                    b.Property<int>("FileSize");

                    b.Property<string>("FileTypeInfo");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.HasIndex("DeviationReportId");

                    b.HasIndex("FileId");

                    b.ToTable("DeviationReportSolutionsAttachments");
                });

            modelBuilder.Entity("OpeniT.Timesheet.Web.Models.EmploymentCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code");

                    b.Property<string>("Description");

                    b.HasKey("Id");

                    b.ToTable("EmploymentCodes");
                });

            modelBuilder.Entity("OpeniT.Timesheet.Web.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AllDay");

                    b.Property<DateTime?>("End");

                    b.Property<int?>("PublishedEventId");

                    b.Property<DateTime>("Start");

                    b.Property<string>("Title");

                    b.Property<string>("Type");

                    b.Property<int?>("UserLocationId");

                    b.HasKey("Id");

                    b.HasIndex("PublishedEventId");

                    b.HasIndex("UserLocationId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("OpeniT.Timesheet.Web.Models.File", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("Binaries");

                    b.Property<DateTimeOffset>("Date");

                    b.Property<string>("FileName");

                    b.Property<string>("FileTypeInfo");

                    b.Property<int?>("UploadedById");

                    b.HasKey("Id");

                    b.HasIndex("UploadedById");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("OpeniT.Timesheet.Web.Models.KeyResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CheckinById");

                    b.Property<int>("CommentCount");

                    b.Property<DateTimeOffset?>("Deadline");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("KrType");

                    b.Property<DateTimeOffset?>("LastCheckin");

                    b.Property<string>("LastComment");

                    b.Property<DateTimeOffset?>("LastUpdate");

                    b.Property<string>("Note");

                    b.Property<int?>("ObjectiveId");

                    b.Property<double>("Percentage");

                    b.Property<double>("Progress");

                    b.Property<string>("ProgressType");

                    b.Property<double>("Quantity");

                    b.Property<double?>("Score");

                    b.Property<string>("SelfAssessment");

                    b.Property<string>("Status");

                    b.Property<double>("TargetPercentage");

                    b.Property<double>("TargetQuantity");

                    b.Property<int?>("UpdatedById");

                    b.HasKey("Id");

                    b.HasIndex("CheckinById");

                    b.HasIndex("ObjectiveId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("KeyResults");
                });

            modelBuilder.Entity("OpeniT.Timesheet.Web.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("DateIssued");

                    b.Property<DateTimeOffset>("DateNotified");

                    b.Property<DateTimeOffset>("DateSeen");

                    b.Property<string>("Details");

                    b.Property<int?>("ForUserId");

                    b.Property<int>("Importance");

                    b.Property<bool>("Notified");

                    b.Property<DateTimeOffset>("OriginCreated");

                    b.Property<int>("OriginIdentifier");

                    b.Property<string>("OriginType");

                    b.Property<int?>("OriginUserId");

                    b.Property<string>("Param1");

                    b.Property<string>("Param2");

                    b.Property<string>("Param3");

                    b.Property<string>("RelevantInfo");

                    b.Property<bool>("Seen");

                    b.Property<bool>("Superseded");

                    b.Property<int?>("SupersededById");

                    b.HasKey("Id");

                    b.HasIndex("ForUserId");

                    b.HasIndex("OriginUserId");

                    b.HasIndex("SupersededById")
                        .IsUnique()
                        .HasFilter("[SupersededById] IS NOT NULL");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("OpeniT.Timesheet.Web.Models.NSTS", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Midshift");

                    b.Property<DateTime>("Month");

                    b.Property<int>("Nightshift");

                    b.Property<DateTimeOffset?>("SubmittedOn");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("NSTS");
                });

            modelBuilder.Entity("OpeniT.Timesheet.Web.Models.Objective", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Category");

                    b.Property<int>("CommentCount");

                    b.Property<int?>("CreatedById");

                    b.Property<DateTime>("Date");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTimeOffset?>("LastCheckin");

                    b.Property<int?>("LastCheckinById");

                    b.Property<DateTimeOffset?>("LastUpdate");

                    b.Property<string>("Note");

                    b.Property<string>("ObjType");

                    b.Property<int?>("ParentId");

                    b.Property<decimal>("Percentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ProcessId");

                    b.Property<string>("Quarter");

                    b.Property<int?>("UpdatedById");

                    b.Property<int?>("UserId");

                    b.Property<string>("objGroup");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastCheckinById");

                    b.HasIndex("ParentId");

                    b.HasIndex("ProcessId");

                    b.HasIndex("UpdatedById");

                    b.HasIndex("UserId");

                    b.ToTable("Objectives");
                });

            modelBuilder.Entity("OpeniT.Timesheet.Web.Models.ObjectiveAssignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AssignedId");

                    b.Property<string>("Assignment");

                    b.Property<bool>("IsRevoked");

                    b.Property<int?>("ObjectiveId");

                    b.Property<int?>("ProcessId");

                    b.HasKey("Id");

                    b.HasIndex("AssignedId");

                    b.HasIndex("ObjectiveId");

                    b.HasIndex("ProcessId");

                    b.ToTable("ObjectiveAssignments");
                });

            modelBuilder.Entity("OpeniT.Timesheet.Web.Models.OKRActivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Activity");

                    b.Property<int?>("ActivityById");

                    b.Property<DateTime>("Date");

                    b.Property<string>("Description");

                    b.Property<string>("Info");

                    b.Property<string>("Level");

                    b.Property<int>("ObjectId");

                    b.Property<int?>("OwnerId");

                    b.Property<string>("ParentDescription");

                    b.Property<string>("Quarter");

                    b.Property<string>("Type");

                    b.Property<string>("UpdatedField");

                    b.HasKey("Id");

                    b.HasIndex("ActivityById");

                    b.HasIndex("OwnerId");

                    b.ToTable("OKRActivities");
                });

            modelBuilder.Entity("OpeniT.Timesheet.Web.Models.OKRComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment");

                    b.Property<DateTimeOffset>("Date");

                    b.Property<DateTimeOffset>("Deleted");

                    b.Property<DateTimeOffset>("Edited");

                    b.Property<bool>("HasChildren");

                    b.Property<int?>("KeyResultId");

                    b.Property<int?>("ObjectiveId");

                    b.Property<int?>("ParentId");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("KeyResultId");

                    b.HasIndex("ObjectiveId");

                    b.HasIndex("ParentId");

                    b.HasIndex("UserId");

                    b.ToTable("OKRComments");
                });

            modelBuilder.Entity("OpeniT.Timesheet.Web.Models.PinnedRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<double>("Hours");

                    b.Property<string>("Location");

                    b.Property<int>("OrderBy");

                    b.Property<string>("Owner");

                    b.Property<int?>("SubProcessId");

                    b.Property<string>("SubTask");

                    b.Property<string>("Task");

                    b.HasKey("Id");

                    b.HasIndex("SubProcessId");

                    b.ToTable("PinnedRecords");
                });

            modelBuilder.Entity("OpeniT.Timesheet.Web.Models.Process", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DeputyOwnerId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<int?>("OwnerId");

                    b.Property<int>("Pid");

                    b.Property<string>("TaskUri");

                    b.Property<string>("TaskUriPrefix");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.HasIndex("DeputyOwnerId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Processes");
                });

            modelBuilder.Entity("OpeniT.Timesheet.Web.Models.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountManager");

                    b.Property<string>("Base");

                    b.Property<DateTime?>("DateRequested");

                    b.Property<DateTime?>("EndDate");

                    b.Property<bool>("IsDone");

                    b.Property<string>("Modules");

                    b.Property<string>("Package");

                    b.Property<int>("ProjectId");

                    b.Property<string>("ProjectManager");

                    b.Property<string>("ProjectName");

                    b.Property<string>("Region");

                    b.Property<string>("Resources");

                    b.Property<DateTime?>("StartDate");

                    b.Property<string>("Status");

                    b.Property<string>("TpaResources");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("OpeniT.Timesheet.Web.Models.ProjectActivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment");

                    b.Property<DateTimeOffset>("Date");

                    b.Property<int?>("ProjectId");

                    b.Property<string>("Type");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("ProjectActivities");
                });

            modelBuilder.Entity("OpeniT.Timesheet.Web.Models.ProjectStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Selected");

                    b.Property<string>("Text");

                    b.HasKey("Id");

                    b.ToTable("ProjectStatus");
                });

            modelBuilder.Entity("OpeniT.Timesheet.Web.Models.ProjectType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text");

                    b.HasKey("Id");

                    b.ToTable("ProjectTypes");
                });

            modelBuilder.Entity("OpeniT.Timesheet.Web.Models.PublishedEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AffectedRows");

                    b.Property<DateTimeOffset?>("EndedAt");

                    b.Property<int>("HangfireJobId");

                    b.Property<int?>("PublishedById");

                    b.Property<DateTimeOffset>("StartedAt");

                    b.Property<string>("Status");

                    b.Property<string>("Title");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.HasIndex("PublishedById");

                    b.ToTable("PublishedEvents");
                });

            modelBuilder.Entity("OpeniT.Timesheet.Web.Models.Record", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date");

                    b.Property<string>("Description");

                    b.Property<double?>("EpochStart");

                    b.Property<int>("HangfireJobId");

                    b.Property<double>("Hours");

                    b.Property<int?>("InsertedById");

                    b.Property<bool>("IsFromExcel");

                    b.Property<bool>("IsLocked");

                    b.Property<bool>("IsWFH");

                    b.Property<string>("Location");

                    b.Property<string>("Owner");

                    b.Property<int?>("SubProcessId");

                    b.Property<string>("SubTask");

                    b.Property<string>("Task");

                    b.HasKey("Id");

                    b.HasIndex("InsertedById");

                    b.HasIndex("SubProcessId");

                    b.HasIndex("Owner", "Date");

                    b.ToTable("Records");
                });

            modelBuilder.Entity("OpeniT.Timesheet.Web.Models.RecordSummary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<double>("Difference");

                    b.Property<double>("ExcessHours");

                    b.Property<double>("Hours");

                    b.Property<string>("LastUpdatedBy");

                    b.Property<DateTime?>("LastUpdatedDate");

                    b.Property<DateTime>("Month");

                    b.Property<double>("RequiredHours");

                    b.Property<double>("SalaryDeduction");

                    b.Property<DateTimeOffset?>("SubmittedOn");

                    b.Property<double>("TotalHours");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RecordSummaries");
                });

            modelBuilder.Entity("OpeniT.Timesheet.Web.Models.Request", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AcknowledgedById");

                    b.Property<DateTimeOffset?>("AcknowledgementDate");

                    b.Property<string>("ApprovalMessage");

                    b.Property<DateTimeOffset?>("AuthorizationDate");

                    b.Property<int?>("AuthorizedById");

                    b.Property<string>("CcRecipients");

                    b.Property<DateTimeOffset>("Date");

                    b.Property<double>("Days");

                    b.Property<DateTime?>("EndDate");

                    b.Property<DateTime?>("FollowUpDate");

                    b.Property<bool?>("IsEL");

                    b.Property<string>("Reason");

                    b.Property<int?>("RecordId");

                    b.Property<int?>("RequestorId");

                    b.Property<DateTime>("StartDate");

                    b.Property<string>("Status");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.HasIndex("AcknowledgedById");

                    b.HasIndex("AuthorizedById");

                    b.HasIndex("RecordId");

                    b.HasIndex("RequestorId");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("OpeniT.Timesheet.Web.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("OpeniT.Timesheet.Web.Models.SiteValues", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Key");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("SiteValues");
                });

            modelBuilder.Entity("OpeniT.Timesheet.Web.Models.SubProcess", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DeputyOwnerId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<int?>("OwnerId");

                    b.Property<int?>("ProcessId");

                    b.Property<int>("SPid");

                    b.HasKey("Id");

                    b.HasIndex("DeputyOwnerId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("ProcessId");

                    b.ToTable("SubProcesses");
                });

            modelBuilder.Entity("OpeniT.Timesheet.Web.Models.TaskGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<bool>("IsDefault");

                    b.Property<string>("Name");

                    b.Property<int?>("ProcessId");

                    b.HasKey("Id");

                    b.HasIndex("ProcessId");

                    b.ToTable("TaskGroups");
                });

            modelBuilder.Entity("OpeniT.Timesheet.Web.Models.TimeLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date");

                    b.Property<double?>("Duration");

                    b.Property<string>("Owner");

                    b.Property<TimeSpan?>("TimeIn");

                    b.Property<TimeSpan?>("TimeOut");

                    b.HasKey("Id");

                    b.ToTable("TimeLogs");
                });

            modelBuilder.Entity("OpeniT.Timesheet.Web.Models.TimeLogSummary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Month");

                    b.Property<double>("NightDiffTotal");

                    b.Property<DateTimeOffset?>("SubmittedOn");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("TimeLogSummaries");
                });

            modelBuilder.Entity("OpeniT.Timesheet.Web.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AzureId");

                    b.Property<DateTime?>("BirthDate");

                    b.Property<DateTimeOffset>("CreatedAt");

                    b.Property<string>("Department");

                    b.Property<string>("DisplayName");

                    b.Property<string>("Email");

                    b.Property<int?>("EmploymentCodeId");

                    b.Property<bool>("IsImportAllowed");

                    b.Property<string>("JobTitle");

                    b.Property<DateTimeOffset?>("LastLogin");

                    b.Property<DateTimeOffset?>("LastUpdate");

                    b.Property<int?>("LineManagerId");

                    b.Property<DateTime?>("RegularizationDate");

                    b.Property<int?>("RoleId");

                    b.Property<DateTime?>("StartDate");

                    b.Property<DateTime?>("TerminationDate");

                    b.Property<DateTimeOffset?>("UpdatedAt");

                    b.Property<int?>("UserLocationId");

                    b.Property<int?>("UserTypeId");

                    b.HasKey("Id");

                    b.HasIndex("Email");

                    b.HasIndex("EmploymentCodeId");

                    b.HasIndex("LineManagerId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserLocationId");

                    b.HasIndex("UserTypeId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("OpeniT.Timesheet.Web.Models.UserContract", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<double>("AllowedSLDays");

                    b.Property<double>("AllowedTODays");

                    b.Property<double>("AllowedVLDays");

                    b.Property<double>("DailyHoursRequired");

                    b.Property<string>("LastUpdatedBy");

                    b.Property<DateTime?>("LastUpdatedDate");

                    b.Property<double>("MonthlyHoursRequired");

                    b.Property<string>("RequiredHours");

                    b.Property<int?>("UserId");

                    b.Property<DateTime?>("ValidFrom");

                    b.Property<DateTime?>("ValidUntil");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserContracts");
                });

            modelBuilder.Entity("OpeniT.Timesheet.Web.Models.UserExcessHours", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Hours");

                    b.Property<int>("UserId");

                    b.Property<int>("Year");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserExcessHours");
                });

            modelBuilder.Entity("OpeniT.Timesheet.Web.Models.UserExcessVL", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Hours");

                    b.Property<int>("UserId");

                    b.Property<int>("Year");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserExcessVL");
                });

            modelBuilder.Entity("OpeniT.Timesheet.Web.Models.UserLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("AllowedSLDays");

                    b.Property<double>("AllowedTODays");

                    b.Property<double>("AllowedVLDays");

                    b.Property<string>("ClassName");

                    b.Property<string>("Code");

                    b.Property<double>("DailyHours");

                    b.Property<bool>("IsDeleted");

                    b.Property<double>("MonthlyHours");

                    b.Property<string>("Name");

                    b.Property<string>("RequiredHours");

                    b.HasKey("Id");

                    b.ToTable("UserLocations");
                });

            modelBuilder.Entity("OpeniT.Timesheet.Web.Models.UserThumbnail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("Content");

                    b.Property<string>("ContentType");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserThumbnails");
                });

            modelBuilder.Entity("OpeniT.Timesheet.Web.Models.UserType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.ToTable("UserTypes");
                });

            modelBuilder.Entity("OpeniT.Timesheet.Web.Models.Checkin", b =>
                {
                    b.HasOne("OpeniT.Timesheet.Web.Models.KeyResult", "KeyResult")
                        .WithMany("Checkins")
                        .HasForeignKey("KeyResultId");

                    b.HasOne("OpeniT.Timesheet.Web.Models.User", "LineManager")
                        .WithMany()
                        .HasForeignKey("LineManagerId");

                    b.HasOne("OpeniT.Timesheet.Web.Models.Objective", "Objective")
                        .WithMany()
                        .HasForeignKey("ObjectiveId");

                    b.HasOne("OpeniT.Timesheet.Web.Models.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");
                });

            modelBuilder.Entity("OpeniT.Timesheet.Web.Models.CheckinConversation", b =>
                {
                    b.HasOne("OpeniT.Timesheet.Web.Models.Checkin", "Checkin")
                        .WithMany("CheckinConversations")
                        .HasForeignKey("CheckinId");

                    b.HasOne("OpeniT.Timesheet.Web.Models.KeyResult", "KeyResult")
                        .WithMany()
                        .HasForeignKey("KeyResultId");

                    b.HasOne("OpeniT.Timesheet.Web.Models.Objective", "Objective")
                        .WithMany()
                        .HasForeignKey("ObjectiveId");

                    b.HasOne("OpeniT.Timesheet.Web.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("OpeniT.Timesheet.Web.Models.DeviationActivity", b =>
                {
                    b.HasOne("OpeniT.Timesheet.Web.Models.DeviationReport", "DeviationReport")
                        .WithMany("DeviationActivities")
                        .HasForeignKey("DeviationReportId");

                    b.HasOne("OpeniT.Timesheet.Web.Models.DeviationActivity", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.HasOne("OpeniT.Timesheet.Web.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("OpeniT.Timesheet.Web.Models.DeviationActivityAttachment", b =>
                {
                    b.HasOne("OpeniT.Timesheet.Web.Models.DeviationActivity", "DeviationActivity")
                        .WithMany("FileAttachments")
                        .HasForeignKey("DeviationActivityId");

                    b.HasOne("OpeniT.Timesheet.Web.Models.File", "File")
                        .WithMany()
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OpeniT.Timesheet.Web.Models.DeviationReport", b =>
                {
                    b.HasOne("OpeniT.Timesheet.Web.Models.Process", "Process")
                        .WithMany()
                        .HasForeignKey("ProcessId");

                    b.HasOne("OpeniT.Timesheet.Web.Models.User", "ReportedBy")
                        .WithMany()
                        .HasForeignKey("ReportedById");

                    b.HasOne("OpeniT.Timesheet.Web.Models.SubProcess", "SubProcess")
                        .WithMany()
                        .HasForeignKey("SubProcessId");

                    b.HasOne("OpeniT.Timesheet.Web.Models.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("OpeniT.Timesheet.Web.Models.DeviationReportAttachment", b =>
                {
                    b.HasOne("OpeniT.Timesheet.Web.Models.DeviationReport", "DeviationReport")
                        .WithMany("FileAttachments")
                        .HasForeignKey("DeviationReportId");

                    b.HasOne("OpeniT.Timesheet.Web.Models.File", "File")
                        .WithMany()
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OpeniT.Timesheet.Web.Models.DeviationReportInvolve", b =>
                {
                    b.HasOne("OpeniT.Timesheet.Web.Models.DeviationReport", "DeviationReport")
                        .WithMany("Involves")
                        .HasForeignKey("DeviationReportId");

                    b.HasOne("OpeniT.Timesheet.Web.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("OpeniT.Timesheet.Web.Models.DeviationReportSolutionsAttachment", b =>
                {
                    b.HasOne("OpeniT.Timesheet.Web.Models.DeviationReport", "DeviationReport")
                        .WithMany("SolutionsFileAttachments")
                        .HasForeignKey("DeviationReportId");

                    b.HasOne("OpeniT.Timesheet.Web.Models.File", "File")
                        .WithMany()
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OpeniT.Timesheet.Web.Models.Event", b =>
                {
                    b.HasOne("OpeniT.Timesheet.Web.Models.PublishedEvent", "PublishedEvent")
                        .WithMany("Events")
                        .HasForeignKey("PublishedEventId");

                    b.HasOne("OpeniT.Timesheet.Web.Models.UserLocation", "UserLocation")
                        .WithMany()
                        .HasForeignKey("UserLocationId");
                });

            modelBuilder.Entity("OpeniT.Timesheet.Web.Models.File", b =>
                {
                    b.HasOne("OpeniT.Timesheet.Web.Models.User", "UploadedBy")
                        .WithMany()
                        .HasForeignKey("UploadedById");
                });

            modelBuilder.Entity("OpeniT.Timesheet.Web.Models.KeyResult", b =>
                {
                    b.HasOne("OpeniT.Timesheet.Web.Models.User", "CheckinBy")
                        .WithMany()
                        .HasForeignKey("CheckinById");

                    b.HasOne("OpeniT.Timesheet.Web.Models.Objective", "Objective")
                        .WithMany("KeyResults")
                        .HasForeignKey("ObjectiveId");

                    b.HasOne("OpeniT.Timesheet.Web.Models.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("OpeniT.Timesheet.Web.Models.Notification", b =>
                {
                    b.HasOne("OpeniT.Timesheet.Web.Models.User", "ForUser")
                        .WithMany()
                        .HasForeignKey("ForUserId");

                    b.HasOne("OpeniT.Timesheet.Web.Models.User", "OriginUser")
                        .WithMany()
                        .HasForeignKey("OriginUserId");

                    b.HasOne("OpeniT.Timesheet.Web.Models.Notification", "SupersededBy")
                        .WithOne("Superseding")
                        .HasForeignKey("OpeniT.Timesheet.Web.Models.Notification", "SupersededById");
                });

            modelBuilder.Entity("OpeniT.Timesheet.Web.Models.NSTS", b =>
                {
                    b.HasOne("OpeniT.Timesheet.Web.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("OpeniT.Timesheet.Web.Models.Objective", b =>
                {
                    b.HasOne("OpeniT.Timesheet.Web.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("OpeniT.Timesheet.Web.Models.User", "LastCheckinBy")
                        .WithMany()
                        .HasForeignKey("LastCheckinById");

                    b.HasOne("OpeniT.Timesheet.Web.Models.Objective", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.HasOne("OpeniT.Timesheet.Web.Models.Process", "Process")
                        .WithMany()
                        .HasForeignKey("ProcessId");

                    b.HasOne("OpeniT.Timesheet.Web.Models.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.HasOne("OpeniT.Timesheet.Web.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("OpeniT.Timesheet.Web.Models.ObjectiveAssignment", b =>
                {
                    b.HasOne("OpeniT.Timesheet.Web.Models.User", "Assigned")
                        .WithMany()
                        .HasForeignKey("AssignedId");

                    b.HasOne("OpeniT.Timesheet.Web.Models.Objective", "Objective")
                        .WithMany("Assignments")
                        .HasForeignKey("ObjectiveId");

                    b.HasOne("OpeniT.Timesheet.Web.Models.Process", "Process")
                        .WithMany()
                        .HasForeignKey("ProcessId");
                });

            modelBuilder.Entity("OpeniT.Timesheet.Web.Models.OKRActivity", b =>
                {
                    b.HasOne("OpeniT.Timesheet.Web.Models.User", "ActivityBy")
                        .WithMany()
                        .HasForeignKey("ActivityById");

                    b.HasOne("OpeniT.Timesheet.Web.Models.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");
                });

            modelBuilder.Entity("OpeniT.Timesheet.Web.Models.OKRComment", b =>
                {
                    b.HasOne("OpeniT.Timesheet.Web.Models.KeyResult", "KeyResult")
                        .WithMany("Comments")
                        .HasForeignKey("KeyResultId");

                    b.HasOne("OpeniT.Timesheet.Web.Models.Objective", "Objective")
                        .WithMany("Comments")
                        .HasForeignKey("ObjectiveId");

                    b.HasOne("OpeniT.Timesheet.Web.Models.OKRComment", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.HasOne("OpeniT.Timesheet.Web.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("OpeniT.Timesheet.Web.Models.PinnedRecord", b =>
                {
                    b.HasOne("OpeniT.Timesheet.Web.Models.SubProcess", "SubProcess")
                        .WithMany()
                        .HasForeignKey("SubProcessId");
                });

            modelBuilder.Entity("OpeniT.Timesheet.Web.Models.Process", b =>
                {
                    b.HasOne("OpeniT.Timesheet.Web.Models.User", "DeputyOwner")
                        .WithMany()
                        .HasForeignKey("DeputyOwnerId");

                    b.HasOne("OpeniT.Timesheet.Web.Models.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");
                });

            modelBuilder.Entity("OpeniT.Timesheet.Web.Models.ProjectActivity", b =>
                {
                    b.HasOne("OpeniT.Timesheet.Web.Models.Project", "Project")
                        .WithMany("ProjectActivities")
                        .HasForeignKey("ProjectId");

                    b.HasOne("OpeniT.Timesheet.Web.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("OpeniT.Timesheet.Web.Models.PublishedEvent", b =>
                {
                    b.HasOne("OpeniT.Timesheet.Web.Models.User", "PublishedBy")
                        .WithMany()
                        .HasForeignKey("PublishedById");
                });

            modelBuilder.Entity("OpeniT.Timesheet.Web.Models.Record", b =>
                {
                    b.HasOne("OpeniT.Timesheet.Web.Models.User", "InsertedBy")
                        .WithMany()
                        .HasForeignKey("InsertedById");

                    b.HasOne("OpeniT.Timesheet.Web.Models.SubProcess", "SubProcess")
                        .WithMany("Records")
                        .HasForeignKey("SubProcessId");
                });

            modelBuilder.Entity("OpeniT.Timesheet.Web.Models.RecordSummary", b =>
                {
                    b.HasOne("OpeniT.Timesheet.Web.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("OpeniT.Timesheet.Web.Models.Request", b =>
                {
                    b.HasOne("OpeniT.Timesheet.Web.Models.User", "AcknowledgedBy")
                        .WithMany()
                        .HasForeignKey("AcknowledgedById");

                    b.HasOne("OpeniT.Timesheet.Web.Models.User", "AuthorizedBy")
                        .WithMany()
                        .HasForeignKey("AuthorizedById");

                    b.HasOne("OpeniT.Timesheet.Web.Models.Record", "Record")
                        .WithMany()
                        .HasForeignKey("RecordId");

                    b.HasOne("OpeniT.Timesheet.Web.Models.User", "Requestor")
                        .WithMany()
                        .HasForeignKey("RequestorId");
                });

            modelBuilder.Entity("OpeniT.Timesheet.Web.Models.SubProcess", b =>
                {
                    b.HasOne("OpeniT.Timesheet.Web.Models.User", "DeputyOwner")
                        .WithMany()
                        .HasForeignKey("DeputyOwnerId");

                    b.HasOne("OpeniT.Timesheet.Web.Models.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.HasOne("OpeniT.Timesheet.Web.Models.Process", "Process")
                        .WithMany("SubProcesses")
                        .HasForeignKey("ProcessId");
                });

            modelBuilder.Entity("OpeniT.Timesheet.Web.Models.TaskGroup", b =>
                {
                    b.HasOne("OpeniT.Timesheet.Web.Models.Process", "Process")
                        .WithMany("TaskGroups")
                        .HasForeignKey("ProcessId");
                });

            modelBuilder.Entity("OpeniT.Timesheet.Web.Models.TimeLogSummary", b =>
                {
                    b.HasOne("OpeniT.Timesheet.Web.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("OpeniT.Timesheet.Web.Models.User", b =>
                {
                    b.HasOne("OpeniT.Timesheet.Web.Models.EmploymentCode", "EmploymentCode")
                        .WithMany()
                        .HasForeignKey("EmploymentCodeId");

                    b.HasOne("OpeniT.Timesheet.Web.Models.User", "LineManager")
                        .WithMany()
                        .HasForeignKey("LineManagerId");

                    b.HasOne("OpeniT.Timesheet.Web.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId");

                    b.HasOne("OpeniT.Timesheet.Web.Models.UserLocation", "UserLocation")
                        .WithMany()
                        .HasForeignKey("UserLocationId");

                    b.HasOne("OpeniT.Timesheet.Web.Models.UserType", "UserType")
                        .WithMany()
                        .HasForeignKey("UserTypeId");
                });

            modelBuilder.Entity("OpeniT.Timesheet.Web.Models.UserContract", b =>
                {
                    b.HasOne("OpeniT.Timesheet.Web.Models.User", "User")
                        .WithMany("UserContracts")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("OpeniT.Timesheet.Web.Models.UserExcessHours", b =>
                {
                    b.HasOne("OpeniT.Timesheet.Web.Models.User")
                        .WithMany("ExcessHours")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OpeniT.Timesheet.Web.Models.UserExcessVL", b =>
                {
                    b.HasOne("OpeniT.Timesheet.Web.Models.User")
                        .WithMany("ExcessVL")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OpeniT.Timesheet.Web.Models.UserThumbnail", b =>
                {
                    b.HasOne("OpeniT.Timesheet.Web.Models.User", "User")
                        .WithOne("Thumbnail")
                        .HasForeignKey("OpeniT.Timesheet.Web.Models.UserThumbnail", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
